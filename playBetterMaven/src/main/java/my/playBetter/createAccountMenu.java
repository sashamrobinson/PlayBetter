package my.playBetter;

/*
By: Sasha Robinson
Date Created: October 13, 2021
Last Edited: January 27, 2022
Description: This file is responsible for the create account menu user interface and the subsequent algorithims used in this process.
*/

import java.io.*;
import java.util.HashMap;
import java.util.regex.*;

/**
 * createAccountMenu class that extends the JFrame object 
 * @author sasha
 */
public class createAccountMenu extends javax.swing.JFrame {

    /**
     * Constructor method that initializes components and sets up GUI
     */
    public createAccountMenu() {
        initComponents();

        // Make error label invisible
        errorLabel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createNamePanel = new javax.swing.JPanel();
        createUsernamePanel = new javax.swing.JPanel();
        usernameText = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        createPasswordPanel = new javax.swing.JPanel();
        passwordText = new javax.swing.JLabel();
        passwordTextField = new javax.swing.JPasswordField();
        createAccountButton = new javax.swing.JButton();
        errorLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        usernameText.setText("Username:");

        usernameTextField.setForeground(new java.awt.Color(51, 51, 51));
        usernameTextField.setText("Username");
        usernameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usernameTextFieldFocusGained(evt);
            }
        });

        javax.swing.GroupLayout createUsernamePanelLayout = new javax.swing.GroupLayout(createUsernamePanel);
        createUsernamePanel.setLayout(createUsernamePanelLayout);
        createUsernamePanelLayout.setHorizontalGroup(
            createUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUsernamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(usernameText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        createUsernamePanelLayout.setVerticalGroup(
            createUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createUsernamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createUsernamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameText)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        passwordText.setText("Password:");

        javax.swing.GroupLayout createPasswordPanelLayout = new javax.swing.GroupLayout(createPasswordPanel);
        createPasswordPanel.setLayout(createPasswordPanelLayout);
        createPasswordPanelLayout.setHorizontalGroup(
            createPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPasswordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(passwordText)
                .addGap(9, 9, 9)
                .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        createPasswordPanelLayout.setVerticalGroup(
            createPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPasswordPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(createPasswordPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordText)
                    .addComponent(passwordTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout createNamePanelLayout = new javax.swing.GroupLayout(createNamePanel);
        createNamePanel.setLayout(createNamePanelLayout);
        createNamePanelLayout.setHorizontalGroup(
            createNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createNamePanelLayout.createSequentialGroup()
                .addGroup(createNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createUsernamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createPasswordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        createNamePanelLayout.setVerticalGroup(
            createNamePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createNamePanelLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(createUsernamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createPasswordPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        createAccountButton.setText("Create Account");
        createAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createAccountButtonActionPerformed(evt);
            }
        });

        errorLabel.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 0, 0));
        errorLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        errorLabel.setText("No error");
        errorLabel.setBounds(new java.awt.Rectangle(0, 0, 50, 50));
        errorLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(createAccountButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(createNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(246, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(errorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createNamePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createAccountButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(errorLabel)
                .addContainerGap(233, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method that is called when the username text field gains focus (user clicks on it). On this event, clear the text field (simply a user interface quality of life)
     * @param evt = generic event handler
     */
    private void usernameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usernameTextFieldFocusGained
        usernameTextField.setText("");
        
    }//GEN-LAST:event_usernameTextFieldFocusGained

    /**
     * Method that is called when the user finalizes their text fields and wishes to create an account - several layers of comparing against database and using RegEx to verify passwords 
     * @param evt = generic event handler
     */
    private void createAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createAccountButtonActionPerformed
        
        // User wishes to create account based on information
        try {

            /**
             * @param writer = FileWriter for writing information to the database
             * @param output = PrinterWriter that printing output to the database
             */
            FileWriter writer = new FileWriter("src/main/java/my/playBetter/Files/users.csv", true);
            PrintWriter output = new PrintWriter(writer);

            /**
             * @param username = the value found in usernameTextField
             * @param passwordChar = the value found in passwordTextField (returned as an array of char)
             * @param password = stringified result of char array from before
            */
            String username = usernameTextField.getText();
            char[] passwordChar = passwordTextField.getPassword();
            String password = new String(passwordChar);

            /**
             * @param pulledUserInformation = returned value of grabUserInformation method found in MainUserInterface - holds users in HashMap
             */
            HashMap<String,String> pulledUserInformation = MainUserInterface.grabUserInformation();

            /**
             * @param verification = check if password is associated with username in database
             */
            String verification = pulledUserInformation.get(username);

            // Check null value
            if (verification != null) {

                // Data found, already in database
                errorLabel.setText("<html>" + "Username is already taken." + "</html>");
                errorLabel.setVisible(true);

            }

            else {

                /**
                 * @param pattern = Regular expresssion pattern that looks for special character
                 * @param pattern2 = Regular expression pattern that looks for a number
                 */
                Pattern pattern = Pattern.compile("[!@#$%&*]");
                Pattern pattern2 = Pattern.compile("[1234567890]");

                /**
                 * @param matcher = Matcher object used to compare pattern to password
                 * @param matcher2 = Matcher object used to compare pattern2 to password
                 */
                Matcher matcher = pattern.matcher(password);
                Matcher matcher2 = pattern2.matcher(password);

                /**
                 * @param lowercase = lowercase password (if it is identical to the normal password, there is no capital)
                 */
                String lowercase = password.toLowerCase();

                // Using all previous set up to verify the users password strength by checking for length, special characters, numbers and capitals
                if (password.length() < 8 || (!matcher.find()) || (!matcher2.find()) || password == lowercase) {

                    // Password isn't strong enough
                    errorLabel.setText("<html>" + "Your password is invalid. For a password to be valid, it needs to be greater than 8 characters, contain a special character, a number and a capital." + "</html>");
                    errorLabel.setVisible(true);

                }
                
                // User information is valid, add it to file
                else {

                    // Adding to file
                    output.println(username + "," + password);

                    output.close();

                    // Transition to other screen
                    this.setVisible(false);
                    new mainMenu().setVisible(true);
                }
            }
        }

        catch (IOException e) {
            System.out.println("Error writing to file");
        }

    }//GEN-LAST:event_createAccountButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(createAccountMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(createAccountMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(createAccountMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(createAccountMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new createAccountMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createAccountButton;
    private javax.swing.JPanel createNamePanel;
    private javax.swing.JPanel createPasswordPanel;
    private javax.swing.JPanel createUsernamePanel;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JLabel passwordText;
    private javax.swing.JPasswordField passwordTextField;
    private javax.swing.JLabel usernameText;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
